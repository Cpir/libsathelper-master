/*
 * CorrelationTest.cpp
 *
 *  Created on: 05/01/2017
 *      Author: lucas
 */

#include "CorrelationTest.h"

#include <iostream>
#include <cstring>
#include <random>
#include <SatHelper/correlator.h>

#define TEST_SIZE 1024

namespace SatHelper {

    static const uint32_t word0 = 0xDEADBEEF;
    static const uint32_t word1 = 0xAAC00FFE;
    static const uint64_t word2 = 0xAABBCCDDEEFF0055;
    static const uint32_t correlationPositionWord0 = 100;
    static const uint32_t correlationPositionWord1 = 500;
    static const uint32_t correlationPositionWord2 = 800;

    static const uint32_t correlationPosition[3] = {
        correlationPositionWord0,
        correlationPositionWord1,
        correlationPositionWord2
    };

    // Generator function in python:
    /*
    word0 = 0xDEADBEEF
    word1 = 0xAAC00FFE
    word2 = 0xAABBCCDDEEFF0055

    word0b = format(word0, '#0{}b'.format(10))[2:]
    word1b = format(word1, '#0{}b'.format(10))[2:]
    word2b = format(word2, '#0{}b'.format(10))[2:]


    data = []
    for i in range(l):
      data.append(0)

    for i in range(l):
      data[i] += 128
      data[i] &= 0xFF

    for i in range(100,100 + len(word0b)):
      data[i] = 255 if word0b[i-100] == "0" else 0

    for i in range(500, 500 + len(word1b)):
      data[i] = 255 if word1b[i-500] == "0" else 0

    for i in range(800, 800 + len(word2b)):
      data[i] = 255 if word2b[i-800] == "0" else 0

    */
    static const uint8_t testData[TEST_SIZE] = {
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128,   0,   0, 255,   0,   0,   0,   0, 255,   0, 255,   0, 255,
          0,   0, 255,   0,   0, 255,   0,   0,   0,   0,   0, 255,   0,   0,   0, 255,
          0,   0,   0,   0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128,   0, 255,   0, 255,   0, 255,   0, 255,   0,   0, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0, 255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
          0, 255,   0, 255,   0, 255,   0, 255,   0, 255,   0,   0,   0, 255,   0,   0,
          0,   0, 255, 255,   0,   0, 255, 255,   0,   0, 255,   0,   0,   0, 255,   0,
          0,   0,   0, 255,   0,   0,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,
        255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255,   0, 255,   0, 255,   0,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128
    };

    bool CorrelationTest::RunTest() {

        std::random_device rd;
        std::mt19937 e2(rd());
        std::normal_distribution<> dist(-50, 50);
        uint8_t data[TEST_SIZE];
        SatHelper::Correlator correlator[3];

        std::memcpy(data, testData, TEST_SIZE);

        correlator[0].addWord(word0);
        correlator[1].addWord(word1);
        correlator[2].addWord(word2);

        std::cout << "  | Testing with plain data." << std::endl;
        for (int i=0; i<3; i++) {
            correlator[i].correlate(data, TEST_SIZE);
            if (correlator[i].getHighestCorrelationPosition() != correlationPosition[i]) {
                std::cerr << "    - Word" << i << " correlation in wrong position. Expected " << correlationPosition[i] << " got " << correlator[i].getHighestCorrelationPosition() << std::endl;
                return false;
            }
            std::cout << "    | Correlation position for word" << i << ": " << correlator[i].getHighestCorrelationPosition() << " with " << correlator[i].getHighestCorrelation() << std::endl;
        }

        std::cout << "  | Testing with gaussian noise." << std::endl;
        for (int i=0; i<TEST_SIZE; i++) {
            int32_t v = data[i];
            v += std::round(dist(e2));
            v = v > 0xFF ? 0xFF : v;
            v = v < 0 ? 0 : v;
            data[i] = v & 0xFF;
        }

        for (int i=0; i<3; i++) {
            correlator[i].correlate(data, TEST_SIZE);
            if (correlator[i].getHighestCorrelationPosition() != correlationPosition[i]) {
                std::cerr << "    - Word" << i << " correlation in wrong position. Expected " << correlationPosition[i] << " got " << correlator[i].getHighestCorrelationPosition() << std::endl;
                return false;
            }
            std::cout << "    | Correlation position for word" << i << ": " << correlator[i].getHighestCorrelationPosition() << " with " << correlator[i].getHighestCorrelation() << std::endl;
        }

        return true;
    }
} /* namespace SatHelper */

RUNTEST(CorrelationTest)
